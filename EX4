#include <iostream>
#include <cmath>
using namespace std;

class Vecteur3d {
private:
    float x, y, z;

public:
    Vecteur3d(float x = 0, float y = 0, float z = 0) : x(x), y(y), z(z) {}

    void afficher() const {
        cout << "(" << x << ", " << y << ", " << z << ")" << endl;
    }

    Vecteur3d somme(const Vecteur3d& v) const {
        return Vecteur3d(x + v.x, y + v.y, z + v.z);
    }

    float produitScalaire(const Vecteur3d& v) const {
        return x * v.x + y * v.y + z * v.z;
    }

    bool coincide(const Vecteur3d& v) const {
        return x == v.x && y == v.y && z == v.z;
    }

    float norme() const {
        return sqrt(x * x + y * y + z * z);
    }

    Vecteur3d normax(const Vecteur3d& v) const {
        return (norme() > v.norme()) ? *this : v;
    }
};

int main() {
    Vecteur3d v1(1.0, 2.0, 3.0), v2(4.0, 5.0, 6.0);
    
    cout << "Vecteur 1: "; v1.afficher();
    cout << "Vecteur 2: "; v2.afficher();

    Vecteur3d somme = v1.somme(v2);
    cout << "Somme: "; somme.afficher();

    cout << "Produit scalaire: " << v1.produitScalaire(v2) << endl;

    cout << "Coincide: " << (v1.coincide(v2) ? "Oui" : "Non") << endl;

    cout << "Norme de v1: " << v1.norme() << endl;
    cout << "Norme de v2: " << v2.norme() << endl;

    cout << "Vecteur avec la plus grande norme: ";
    v1.normax(v2).afficher();

    return 0;
}
